plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'jacoco'
    id "io.freefair.lombok" version "4.1.6"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "jacoco"
apply plugin: 'org.springframework.boot'

group 'com.example'
version '1.0-SNAPSHOT'
project.buildDir = 'target'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "org.springframework.boot:spring-boot-starter-logging"
        exclude module: "logback-classic"
        exclude module: "log4j-over-slf4j"
    }

    compile('org.springframework.boot:spring-boot-starter-aop') {
        exclude module: "org.springframework.boot:spring-boot-starter-logging"
        exclude module: "logback-classic"
        exclude module: "log4j-over-slf4j"
    }
    compile 'io.reactivex:rxjava:1.3.4'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'

    compile 'org.json:json:20171018'

    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile('org.springframework.boot:spring-boot-starter-test')
}

task devFatJar(type: Jar) {
    zip64 = true
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    exclude('log4j.properties')
    manifest {
        attributes 'Implementation-Title': ' jar springboot ',
                'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
    //reportsDir = file("$buildDir/jacoco")
}

afterEvaluate {
    jacocoTestReport {
        def coverageSourceDirs = ['src/main/java']
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
        }
        sourceDirectories = files(coverageSourceDirs)
        classDirectories = fileTree(
                dir: "${project.buildDir}/classes/java/main",
                excludes: [
                        'com/**/model/**',
                        'com/**/exception/**',
                        'com/**/constants/**',
                        'com/**/config/**'
                ]
        )
    }
}

devFatJar.dependsOn jacocoTestReport
